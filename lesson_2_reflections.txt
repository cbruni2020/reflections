What happens when you initialize a repository? Why do you need to do it?

When you initialize a new repository, you add git to a folder. This is important
 because now that I am going to have multiple different files under reflections it
 is important that they are organized and easily accessible. Making it a repository
 with git init will allow me to access my files easier and track the history of files.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is where files are added to ensure that they are the only files
that will be added when a certain commit is made. Staging area is related to both
status and add. The added files will be shown in the staging area. The repository is
the general location where the commits will be made, but it is not directly related
to the idea of the staging area and the working directory. Lastly, the working
directory shows you the status and is similar to the staging area in this sense,
but does not directly work with commits.

How can you use the staging area to make sure you have one commit per logical
change?

With using git status. The programmer will be able to double check that the files
in the staging area are all directly related to each other before making the command
git commit. This will ensure your commits are small and all related if you keep checking
the staging area.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches are very helpful to keeping history organized because they can Separate
two different aspects of the game rather than having them all jumbled up together.
Branches will also make it easier to find things since it will condense commits related
to certain parts in the game to a certain area.

How do the diagrams help you visualize the branch structure?

Diagrams help a programmer visualize branch structure because it simply allows the
relations between each commit to be seen. You can have a decent understanding of
which commits are on which branch and which commits are simply unreachable.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches together allows a programmer to merge two different aspects
of the game they have been working on. Representing this merge in a diagram is an easy
way to visualizes what commits will be included in the new tip of the master, and
diagrams are a good way to organize which two branches to merge.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

It is very helpful that git automatically merges because it is extremely time 
consuming to have to find every little merge conflict manually. However, it can
make it kind of difficult to track down where the problem could be occurring
since you are less familiar with your code when you are not merging by yourself.
